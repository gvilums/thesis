# An example pipeline to be compiled for execution using UPMEM

[pipeline]
name = "string_process"
input = "uint32_t[2]"
# declares variables which are global for all executions
globals = [
    { name = "global_val", type = "uint32_t" }
]
constants = [
    { name = "zero", type = "uint32_t", init = "0" },
    # { name = "comparison", type = "uint8_t[8]" , init = "{}"},
]


[[stages]]
# this performs a map operation on the data
kind = "map"
output = "uint32_t" 
program = """
*out_ptr = (*in_ptr)[0] + (*in_ptr)[1] + global_val;
""" 

[[stages]]
# filters data elements by a predicate
kind = "filter"
program = """
return *in_ptr == 4;
""" 

[[stages]]
kind = "map"
program = """
*out_ptr = *in_ptr;
"""


[[stages]]
kind = "reduce"
identity = "zero"
output = "uint32_t"
program = """
*out_ptr += *in_ptr;
"""
combine = """
*out_ptr += *in_ptr;
"""