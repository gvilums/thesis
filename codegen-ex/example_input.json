{
    "pipeline": {

    },
    "stages": [
        {
            "kind": "map",
            "out_type": "uint8_t[8]",
            "program": "
            
            "
        }
    ]
}
[pipeline]
name = "string_process"
# declares the input data stream as colelction of 16-byte chunks of unsigned characters
input = "uint8_t[16]"
# declares variables which are global for all executions
globals = [
    { name = "zero_vec", type = "uint8_t[8]" }
]
constants = [
    { name = "comparison", type = "uint8_t[8]" , init = "{}"},
]
sysincludes = ["string.h"]


[[stages]]
# this performs a map operation on the data
kind = "map"
output = "uint8_t[8]" 
program = """
memcpy(output, input, 8);
for (size_t i = 0; i < 8; ++i) {
    output[i] *= 2;
}
""" 

[[stages]]
# filters data elements by a predicate
kind = "filter"
program = """
return memcmp(input, comparison) != 0;
""" 

[[stages]]
kind = "reduce"
identity = "zero_vec"
output = "uint8_t[4]"
program = """ asdfa """

# program = """
# for (size_t i = 0; i < 4; ++i) {
#     output[i] = input0[i] + input1[i];
# }
# """
# combine = """
# for (size_t i = 0; i < 4; ++i) {
#     output[i] = input0[i] + input1[i];
# }
# """